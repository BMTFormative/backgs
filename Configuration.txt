CREATE VIEW TotalPayments AS
 SELECT paycustomers."SaleNumber",sum(paycustomers."Amount") AS TotalPayment
 FROM paycustomers
 GROUP BY paycustomers."SaleNumber" ;


CREATE VIEW TotalAmounts AS
SELECT "SaleNumber",SUM("Qty" * "Prix") AS TotalAmount , "DateSale"
FROM sales
GROUP BY "SaleNumber" ,"DateSale";

CREATE VIEW Globalsellbuys AS
SELECT 
    coalesce(gp."CustomerId", gs."CustomerId") AS "CustomerId",
    coalesce(gp.GlobalPayments, 0) AS GlobalPayments,
    coalesce(gs.GlobalSales, 0) AS GlobalSales
FROM 
    (SELECT 
        sales."CustomerId",
        SUM(paycustomers."Amount") AS GlobalPayments
     FROM 
        paycustomers
        JOIN sales ON paycustomers."SaleNumber" = sales."SaleNumber"
     GROUP BY 
        sales."CustomerId") gp
FULL OUTER JOIN
    (SELECT 
        sales."CustomerId",
        SUM(sales."Qty"::numeric * sales."Prix") AS GlobalSales
     FROM 
        sales
     GROUP BY 
        sales."CustomerId") gs
ON gp."CustomerId" = gs."CustomerId";


CREATE VIEW product_qty_changes AS
WITH sales_sum AS (
    SELECT
        "ProductId",
        SUM("Qty") AS decrease
    FROM sales
    GROUP BY "ProductId"
),
stocks_sum AS (
    SELECT
        "ProductId",
        SUM("Qty") AS increase
    FROM stocks
    GROUP BY "ProductId"
)
SELECT
    s."ProductId",
    COALESCE(s.increase, 0) - COALESCE(st.decrease, 0) AS net_change
FROM stocks_sum s
FULL OUTER JOIN sales_sum st ON s."ProductId" = st."ProductId";

------------------------------------
php artisan make:migration create_products_table
php artisan make:model Product
php artisan make:controller ProductController --api
php artisan make:seeder ProductSeeder
php artisan db:seed --class=ProductSeeder
----------------------
php artisan make:migration create_suppliers_table --create=suppliers
php artisan make:model Supplier
php artisan make:controller SupplierController --api
php artisan make:seeder SupplierSeeder
php artisan db:seed --class=SupplierSeeder
----------------------
php artisan make:migration create_customers_table --create=customers
php artisan make:model Customer
php artisan make:controller CustomerController --api
php artisan make:seeder CustomerSeeder
php artisan db:seed --class=CustomerSeeder
----------------------
php artisan make:migration create_sales_table --create=sales
php artisan make:model Sale
php artisan make:controller SaleController --api
php artisan make:seeder SaleSeeder
php artisan db:seed --class=SaleSeeder
----------------------
php artisan make:migration create_stocks_table --create=stocks
php artisan make:model Stock
php artisan make:controller StockController --api
php artisan make:seeder StockSeeder
php artisan db:seed --class=StockSeeder
----------------------
php artisan make:migration create_paycustomers_table --create=paycustomers
php artisan make:model Paycustomer
php artisan make:controller PaycustomerController --api
php artisan make:seeder PaycustomerSeeder
php artisan db:seed --class=PaycustomerSeeder
---------------------GlobalepaymentId
php artisan make:migration create_globalpayments_table --create=globalpayments
php artisan make:model Globalpayment
php artisan make:controller GlobalpaymentController --api
php artisan make:seeder GlobalpaymentSeeder
php artisan db:seed --class=GlobalpaymentSeeder
----------------------View calculation totalpayment --------------------
php artisan make:model totalpayment
php artisan make:controller TotalpaymentController --api
----------------------View calculation totalamount--------------------
php artisan make:model totalamount
php artisan make:controller TotalamountController --api
----------------------View calculation totalamount--------------------
php artisan make:model ProductQtyChange 
----------------------View calculation Globalsellbuys--------------------
php artisan make:model globalsellbuy
php artisan make:controller GlobalsellbuyController --api


--------------------------------------------------------------------------- function split global payment 
CREATE OR REPLACE FUNCTION allocate_global_payment(global_payment_id bigint, total_payment_amount decimal)
RETURNS void AS $$
DECLARE
    current_sale record;  -- Holds each row fetched from the loop query
    remaining_payment decimal := total_payment_amount;
    allocate_amount decimal;
BEGIN
    -- Loop through each sale and allocate the payment
    FOR current_sale IN 
        SELECT s."SaleNumber",s."created_at", s."totalamount" - COALESCE(SUM(p."Amount"), 0) AS outstanding
        FROM totalamounts s
        LEFT JOIN paycustomers p ON s."SaleNumber" = p."SaleNumber"
        --WHERE s."CustomerId" = (SELECT "CustomerId" FROM globalpayments )
        GROUP BY s."SaleNumber", s."totalamount" ,s."created_at"
        HAVING s."totalamount" - COALESCE(SUM(p."Amount"), 0) > 0
        ORDER BY s."created_at" ASC
    LOOP
        -- Calculate the amount to allocate to this sale
        IF remaining_payment <= 0 THEN
            EXIT;
        END IF;

        allocate_amount := LEAST(current_sale.outstanding, remaining_payment);

        -- Insert into paycustomers using correct column names and record field access
        INSERT INTO public.paycustomers("SaleNumber", "DatePayment", "Amount", "GlobalepaymentId")
        VALUES (current_sale."SaleNumber", NOW(), allocate_amount, global_payment_id);

        -- Update remaining payment
        remaining_payment := remaining_payment - allocate_amount;
    END LOOP;
END;
$$ LANGUAGE plpgsql;